##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Copyright (C), 2003, Victorian Partnership for Advanced Computing (VPAC) Ltd, 110 Victoria Street, Melbourne, 3053, Australia.
##
## Authors:
##      Stevan M. Quenette, Senior Software Engineer, VPAC. (steve@vpac.org)
##      Patrick D. Sunter, Software Engineer, VPAC. (pds@vpac.org)
##      Luke J. Hodkinson, Computational Engineer, VPAC. (lhodkins@vpac.org)
##      Siew-Ching Tan, Software Engineer, VPAC. (siew@vpac.org)
##      Alan H. Lo, Computational Engineer, VPAC. (alan@vpac.org)
##      Raquibul Hassan, Computational Engineer, VPAC. (raq@vpac.org)
##
##  This library is free software; you can redistribute it and/or
##  modify it under the terms of the GNU Lesser General Public
##  License as published by the Free Software Foundation; either
##  version 2.1 of the License, or (at your option) any later version.
##
##  This library is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##  Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public
##  License along with this library; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
##
## $Id: checks.vmake 2586 2005-01-28 00:08:55Z AlanLo $
##
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# "checks" specifies the executables to run and check for a SUCCESS return value. If specified, this triggers the event.
ifdef checks
	CHECKS = ${checks}
	PATCH_TESTS = $(addsuffix -patch,${checks})
endif

ifdef long_checks
	LONG_CHECKS += ${long_checks}
	LONG_PATCH_TESTS += $(addsuffix -patch,${long_checks})
endif

# "long_checks" are the list of tests which don't usually run unless --options=run_long_tests is specified
# because these tests take too long
ifdef USE_RUN_LONG_TESTS
	CHECKS += ${LONG_CHECKS}
	PATCH_TESTS += ${LONG_PATCH_TESTS}
endif

# Adding in a science benchmark checks option
ifdef scibenchmark_checks
	SCIBENCHMARK_CHECKS = = ${scibenchmark_checks}
	SCIBENCHMARK_PATCH_TESTS += $(addsuffix -patch,${sccd scibenchmark_checks})
endif

# if science benchmark tests are run, the other test are not run.
ifdef USE_RUN_SCIBENCHMARK_TESTS
	CHECKS = ${SCIBENCHMARK_CHECKS}
	PATCH_TESTS = ${SCIBENCHMARK_PATCH_TESTS}
endif

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Copyright (C), 2003, Victorian Partnership for Advanced Computing (VPAC) Ltd, 110 Victoria Street, Melbourne, 3053, Australia.
##
## Authors:
##      Stevan M. Quenette, Senior Software Engineer, VPAC. (steve@vpac.org)
##      Patrick D. Sunter, Software Engineer, VPAC. (pds@vpac.org)
##      Luke J. Hodkinson, Computational Engineer, VPAC. (lhodkins@vpac.org)
##      Siew-Ching Tan, Software Engineer, VPAC. (siew@vpac.org)
##      Alan H. Lo, Computational Engineer, VPAC. (alan@vpac.org)
##      Raquibul Hassan, Computational Engineer, VPAC. (raq@vpac.org)
##
##  This library is free software; you can redistribute it and/or
##  modify it under the terms of the GNU Lesser General Public
##  License as published by the Free Software Foundation; either
##  version 2.1 of the License, or (at your option) any later version.
##
##  This library is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##  Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public
##  License along with this library; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
##
## $Id: single_exe.vmake 2586 2005-01-28 00:08:55Z AlanLo $
##
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ifndef XML_APP
single_exe:
	@echo "Usage: make single_exe XML_APP=(xml file) APP=(binary name)"

else

ifndef APP
single_exe:
	@echo "Usage: make single_exe XML_APP=(xml file) APP=(binary name)"

else

# Targets for the object files and libs but no executable
single_exe_objs_and_libs: ${PRE_MAKE} ${SUBDIRS} ${LIB} ${HEADERS} ${MOD} ${PLUGINS_OBJS} ${PLUGINS} ${PYB} remove-meta ${POST_MAKE}

# Targets the final binary
ifeq ($(findstring ${APP},${BIN}),)
single_exe_binary: ${SUBDIRS}
else
single_exe_binary: ${SUBDIRS} ${BIN}
endif

CFLAGS += "-DSINGLE_EXE"
SINGLE_EXE_LIB := $(shell echo "-L${LIB_DIR} -l`basename ${XML_APP} .xml`")
EXTERNAL_LIBS := ${SINGLE_EXE_LIB} ${EXTERNAL_LIBS} ${SINGLE_EXE_LIB} ${EXTERNAL_LIBS}

ifdef EXTRA_PACKAGES
	EXTERNAL_LIBS += $(foreach package, ${EXTRA_PACKAGES}, $($(package)_LIBS) )
endif

single_exe: single_exe_objs_and_libs
	@(if test ! -x ${STGERMAIN_DIR}/bin/ListPlugins; then echo "Make ListPlugin program in StGermain first"; exit 1; fi)
	# Creating soft link to have relative path access to data
	@(${LN_S} ${STGERMAIN_DIR}/bin/ListPlugins ListPlugins-softlink)

	# Making temp dirs to store info
	@(if test ! -d `dirname ${TMP_DIR}/${XML_APP}`; then ${MKDIR} `dirname ${TMP_DIR}/${XML_APP}`; fi)

	# Making list of plugins required
	@(./ListPlugins-softlink ${XML_APP} | ${GREP} -v "StGermain Framework\." > ${TMP_DIR}/${XML_APP}.pluginlist)

	# Making directory list of where plugin objects are found
	@(if test -f ${TMP_DIR}/${XML_APP}.dirs; then ${RM} ${TMP_DIR}/${XML_APP}.dirs; fi)
	-@(for plugin in `cat ${TMP_DIR}/${XML_APP}.pluginlist`; do dirname `find ${TMP_DIR} -name $$plugin.o` >> ${TMP_DIR}/${XML_APP}.dirs 2> /dev/null; done)
	-@(for plugin in `cat ${TMP_DIR}/${XML_APP}.pluginlist`; do find ${TMP_DIR} -type d -name "*$${plugin}module*" >> ${TMP_DIR}/${XML_APP}.dirs 2> /dev/null; done)

	# Making complete list of plugin objects
	@(if test -f ${TMP_DIR}/${XML_APP}.objlist; then ${RM} ${TMP_DIR}/${XML_APP}.objlist; fi)
	@(for dirs in `cat ${TMP_DIR}/${XML_APP}.dirs | uniq`; do find $$dirs -name "*.o" >> ${TMP_DIR}/${XML_APP}.objlist; done)

	# Making Register code for plugins
	@(echo "" > ${TMP_DIR}/${XML_APP}.c)
	@(for plugin in `cat ${TMP_DIR}/${XML_APP}.pluginlist`; do echo "void $${plugin}_Register( void* context );" >> ${TMP_DIR}/${XML_APP}.c; done)
	@(echo "void SingleRegister( void* context ) {" >> ${TMP_DIR}/${XML_APP}.c)
	@(for plugin in `cat ${TMP_DIR}/${XML_APP}.pluginlist`; do echo "$${plugin}_Register( context );" >> ${TMP_DIR}/${XML_APP}.c; done)
	@(echo "}" >> ${TMP_DIR}/${XML_APP}.c)
	@(${CC} ${CC_PIPE} ${CFLAGS} ${SO_CFLAGS} -c -o ${TMP_DIR}/${XML_APP}.o ${TMP_DIR}/${XML_APP}.c)
	@(echo "${TMP_DIR}/${XML_APP}.o" >> ${TMP_DIR}/${XML_APP}.objlist)

	# Creating library archive
	@(cat ${TMP_DIR}/${XML_APP}.objlist | xargs ${AR} cruP ${TMP_DIR}/${XML_APP}.a)
	@(${CP} ${TMP_DIR}/${XML_APP}.a ${LIB_DIR}/lib`basename ${XML_APP} .xml`.a)
	@(${RM} ListPlugins-softlink)
	# Running make to create executable
	@(make single_exe_binary XML_APP=${XML_APP} APP=${APP})

endif
endif


single_exe-help: help-title single_exe-command-header
	@echo "Compiles all sources into a single executable (libs+plugins)"
	@echo "Useful for machines such as the blue gene which does not"
	@echo "suppose dynamic libraries"
	@echo "NOTE:"
	@echo "This command has been unchecked since late 2005"

COMMAND_HELP += single_exe-help


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Copyright (C), 2003, Victorian Partnership for Advanced Computing (VPAC) Ltd, 110 Victoria Street, Melbourne, 3053, Australia.
##
## Authors:
##      Stevan M. Quenette, Senior Software Engineer, VPAC. (steve@vpac.org)
##      Patrick D. Sunter, Software Engineer, VPAC. (pds@vpac.org)
##      Luke J. Hodkinson, Computational Engineer, VPAC. (lhodkins@vpac.org)
##      Siew-Ching Tan, Software Engineer, VPAC. (siew@vpac.org)
##      Alan H. Lo, Computational Engineer, VPAC. (alan@vpac.org)
##      Raquibul Hassan, Computational Engineer, VPAC. (raq@vpac.org)
##
##  This library is free software; you can redistribute it and/or
##  modify it under the terms of the GNU Lesser General Public
##  License as published by the Free Software Foundation; either
##  version 2.1 of the License, or (at your option) any later version.
##
##  This library is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##  Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public
##  License along with this library; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
##
## $Id: tests.vmake 2586 2005-01-28 00:08:55Z AlanLo $
##
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# "tests" specifies to build an executable from each of the single-file-sources specified in "SRCS". The value of "tests" needs to
#   be only one value and unique (used to create a temporary built location). If specified, this triggers the event.
ifdef tests

	# hack temp until metadata has their own extension
	SRCS := $(filter-out %-meta.c, ${SRCS})

	PROJ_CFLAGS+=${CC_WARNINGLEVEL} ${CC_SYMBOLLEVEL} ${CC_OPTIMISATIONLEVEL} -DCURR_MODULE_NAME=\"${tests}\"
	PROJ_LFLAGS += -L${LIB_DIR}

	TESTS = ${addprefix ${TST_DIR}/, ${basename ${SRCS}}}
	TESTS_LINKS = ${basename ${SRCS}}
	TEST_OBJS =  ${addprefix ${TMP_DIR}/test-${tests}/, ${addsuffix .o,      ${basename ${TEST_SUPPORT_SRCS}}}}
	#LIBS +=      ${addprefix ${LIB_DIR}/, ${PROJ_LIBS}}

	PATCH_TESTS = $(addsuffix -patch,${checks})

	RM_LIST_TEMPS += ${TEST_OBJS}
	RM_LIST += ${TESTS} ${TESTS_LINKS}


COMPILE_DIRECTORY := ${TMP_DIR}/test-${tests}

${TST_DIR}/%: %.c ${LIBS} ${EXTERNAL_OBJS} ${TEST_OBJS}
	@if test ! -d ${TST_DIR}; then ${MKDIR} ${TST_DIR}; fi
	${CC} ${CC_PIPE} ${CFLAGS} -o $@ ${TEST_OBJS} ${INCLUDES} $< ${EXTERNAL_OBJS} ${LFLAGS} ${LIBS} ${EXTERNAL_LIBS}

${TST_DIR}/%: %.m ${LIBS} ${EXTERNAL_OBJS} ${TEST_OBJS}
	@if test ! -d ${TST_DIR}; then ${MKDIR} ${TST_DIR}; fi
	${OBJCC} ${CC_PIPE} ${CFLAGS} -o $@ ${TEST_OBJS} ${INCLUDES} $< ${EXTERNAL_OBJS} ${LFLAGS} ${LIBS} ${EXTERNAL_LIBS}

${TESTS_LINKS}: %: ${TESTS}
	@ln -s ${TST_DIR}/$@

## Implicit rule for patching a test:
%.sh-patch:
	@$(DUMP_VARS_TO_TMP_FILE) \
		UPDATE_MODE="on" ${SH} ./${*}.sh; \
		rm tmp.sh;


	

test-links: ${TESTS_LINKS}

endif








/***********************************************************************\
 **
 **  tErosion::DetachErode
 **
 **  Algorithm for eroding sediment and bedrock.  Material is only detached
 **  if the stream has the capacity to carry it. Handles multiple grain
 **  sizes. Replaces StreamErode and StreamErodeMulti.
 **
\************************************************************************/

void tErosion::DetachErode(double dtg, tStreamNet *strmNet, double time,
			   tVegetation * /*pVegetation*/ )
{

  //Added 4/00, if there is no runoff, this would crash, so check
  if(strmNet->getRainRate()-strmNet->getInfilt()>0){

    double dtmax;       // time increment: initialize to arbitrary large val
    double frac = 0.3;  //fraction of time to zero slope
    double timegb=time; //time gone by - for layering time purposes
    bool flag;
    tLNode * cn, *dn;
    // int nActNodes = meshPtr->getNodeList()->getActiveSize();
    tMesh< tLNode >::nodeListIter_t ni( meshPtr->getNodeList() );
    double ratediff,  // Difference in ero/dep rate btwn node & its downstrm nbr
      drdt,
      dz,
      depck,
      qs,
      excap;
    tLNode * inletNode = strmNet->getInletNodePtrNC();
    double insedloadtotal = strmNet->getInSedLoad();
	int debugCount = 0;

    cn = ni.FirstP();

    tArray <double> ret( cn->getNumg() ); //amt actually ero'd/dep'd
    tArray <double> erolist( cn->getNumg() );
    const tArray <double> sedzero( cn->getNumg() );
    tArray <double> insed( strmNet->getInSedLoadm() );

    // Sort so that we always work in upstream to downstream order
    strmNet->SortNodesByNetOrder();
    strmNet->FindChanGeom();
    strmNet->FindHydrGeom();


    // Compute erosion and/or deposition until all of the elapsed time (dtg)
    // is used up
    do
      {
	// Zero out sed influx of all sizes
	for( cn = ni.FirstP(); ni.IsActive(); cn = ni.NextP() )
	  {
            cn->setQs(0.0);
            if( cn!=inletNode )
	      {
		cn->setQsin(0.0); //totals are for ts calculation
		cn->setQsin( sedzero );
		for( size_t i=0; i<cn->getNumg(); i++ ){
                  cn->setQs(i,0.0);
		}
	      }
            else
	      {
		cn->setQsin(insedloadtotal); //totals are for ts calculation
		cn->setQsin( insed );
		for( size_t i=0; i<cn->getNumg(); i++ ){
                  cn->setQs(i,0.0);
		  //std::cout << "inlet qsin size " << i << "=" << insed[i] << std::endl;
		}
	      }
	  }

	// Estimate erosion rates and time-step size
	// NOTE - in this first loop we are only dealing with
	// totals for time-step calculations, however transport
	// rates for each size are also set within the function call.
	for( cn = ni.FirstP(); ni.IsActive(); cn = ni.NextP() )
	  {
            depck=0.;
            int i=0;
            qs=0.;

            assert(cn->getChanDepth()<1000);

            while((cn->getChanDepth()-depck)>0.0001)
	      {
		// Total transport capacity is a weighted average
		// of the transport capacity calculated from each
		// layer within the channel depth.
		// sediment and bedrock treated the same
		// units on qs are l^3/t
		if((depck+cn->getLayerDepth(i))<=cn->getChanDepth())
		  {
		    //TransportCapacity function should keep running
		    //sum of qs of each grain size.
		    //qs returned is in m^3/yr; qs stored in tLNode has same units
		    qs+=sedTrans->TransCapacity(cn,i,cn->getLayerDepth(i)/cn->getChanDepth());
		  }
		else
		  {
		    qs+=sedTrans->TransCapacity(cn,i,1-(depck/cn->getChanDepth()));
		  }
		depck+=cn->getLayerDepth(i); //need to keep this here for qs calc
		i++;
	      }

            //NIC this detachcapacity returns the correct thing, but
            //it also sets within the layer the drdt of each size.
            //You don't want to use detach capacity this way, so
            //I don't think that will affect anything, just be careful of
            //using those values!!!

            if(depck>cn->getChanDepth()) //which layer are you basing detach on?
	      drdt=-bedErode->DetachCapacity( cn, i-1 );
            else
	      drdt=-bedErode->DetachCapacity( cn, i );//[m^3/yr]

            cn->setDrDt(drdt);
            cn->setDzDt(drdt);

	    /*std::cout << "*** EROSION ***\n";
	      if( cn->getID()==342 ) {
	      std::cout << "**** Trans Cap 342 = " << qs << std::endl;
	      cn->TellAll();
	      }*/

            excap=(qs - cn->getQsin())/cn->getVArea();//[m/yr]
            //excap negative = deposition; positive = erosion
            //Note that signs are opposite to what one
            //might expect.  This works out for Qsin addition.
            //Limit erosion to capacity of flow or deposition
            if( -drdt > excap )
	      {
		cn->setDzDt(-excap);
	      }
            cn->getDownstrmNbr()->addQsin(cn->getQsin()-cn->getDzDt()*cn->getVArea());
	  }//ends for( cn = ni.FirstP...

	//Find local time-step based on dzdt
	// dtmax = dtg/frac; hf commented this out, doesn't make sense
	for( cn = ni.FirstP(); ni.IsActive(); cn = ni.NextP() )
	  {
            //Not for time step calculations, just utilizing loop
            if( cn!=inletNode )
	      {
		//Note-seting qsini for each size should automatically
		//properly set qstotal to be the sum of all qsini
		cn->setQsin( sedzero );
	      }
            else
	      {
		cn->setQsin( insed );
	      }

            dn = cn->getDownstrmNbr();
            ratediff = dn->getDzDt() - cn->getDzDt(); //Are the pts converging?
            if( ratediff > 0. && (cn->calcSlope()) > 1e-7 )  // if yes, get time
	      {                                              //  to zero slope
		if(1) 
		  {
		    double dt;
		    dt = ( cn->getZ() - dn->getZ() ) / ratediff;
		    if( dt < dtmax ) dtmax = dt;
		  }
		if( ratediff*dtmax > (cn->getZ() - dn->getZ() ) )
		  {
		    dtmax = ( cn->getZ() - dn->getZ() ) / ratediff;
		    assert( dtmax > 0.0 );
		    if( dtmax < 0.0001 && dtmax < dtg )
		      {
			if(1) 
			  { // debug
			    std::cout << "Very small dtmax " << dtmax <<  std::endl;
			    std::cout << "rate dif is " << ratediff << std::endl;
			    std::cout << "elev dif is " << cn->getZ()-dn->getZ() << std::endl;
			    std::cout << "dzdt upstream is " << cn->getDzDt() << std::endl;
			    std::cout << "dzdt downstream is " << dn->getDzDt() << std::endl;
			    cn->TellAll();
			    dn->TellAll();
			  }
			//dtmax=0.0001; //GREG I added this just because things
			// were taking forever.  I kept it for now just for
			// testing stuff.  Maybe we should discuss this.
			//this was set to 0.0001 by NIC, I'm making it smaller
			//because I'm having instability problems.. my storms are
			// 0.0001! 
		      }
		  }
	      }
	  }// End for( cn = ni.FirstP()..
	dtmax *= frac;  // Take a fraction of time-to-flattening
	timegb+=dtmax;
         
         //At this point: we have drdt and qs for each node, plus dtmax
         
         // Do erosion/deposition
	for( cn = ni.FirstP(); ni.IsActive(); cn = ni.NextP() )
	  {
            //need to recalculate cause qsin may change due to time step calc
            excap=(cn->getQs() - cn->getQsin())/cn->getVArea();

            //std::cout<<"actual erosion excap = "<<excap<<std::endl;
            //std::cout<<"drdt is "<<cn->getDrDt()<<std::endl;
            //again, excap pos if eroding, neg if depositing
            //nic here is where drdt comes in again
            //flag is used to determine the texture of what should be eroded.
            //If detach limited, just erode what is there, but always limit
            //it by what flow has capacity to transport.  If transport limited,
            //the texture of what erode is determined by the calculated values
            //of qs.
            if( -cn->getDrDt() < excap ){
	      dz = cn->getDrDt()*dtmax; // detach-lim
	      flag = false;
            }
            else{
	      dz = -excap*dtmax; // trans-lim
	      flag = true;
            }

            for(size_t i=0; i<cn->getNumg(); i++)
	      cn->getDownstrmNbr()->addQsin(i,cn->getQsin(i));
            //What goes downstream will be what comes in + what gets ero'd/dep'd
            //This should always be negative or zero since max amt
            //to deposit is what goes in.
            //i.e. send (qsin[i]-ret[i]*varea/dtmax) downstream
            //Note: I think need to do the add in here and possibly take out later
            //because of looping through layers for the same erosion pass.

            /*DEBUG double l0, l1;
              if( cn->getX()>50.0 && cn->getX()<51.0
              && cn->getY()>29.0 && cn->getY()<30.0 )
              {
              std::cout << "f (" << cn->getID() << " ld = " << cn->getLayerDepth(0) << std::endl;
              l0 = cn->getLayerDgrade(0,0);
              l1 = cn->getLayerDgrade(0,1);
              }*/

            if( dz<0 ) //total erosion
	      {
		if(!flag){ // detach-lim
                  int i=0;
                  depck=0.;
                  while(dz<-0.000000001&&depck<cn->getChanDepth()&&i<cn->getNumLayer()){
		    depck+=cn->getLayerDepth(i);
		    if(-dz<=cn->getLayerDepth(i)){//top layer can supply total depth
		      for(size_t j=0;j<cn->getNumg();j++){
			erolist[j]=dz*cn->getLayerDgrade(i,j)/cn->getLayerDepth(i);
			if(erolist[j]<(cn->getQsin(j)-cn->getQs(j))*dtmax/cn->getVArea()){
			  //decrease total dz because of capacity limitations
			  erolist[j]=(cn->getQsin(j)-cn->getQs(j))*dtmax/cn->getVArea();
			  cn->setQsin(j,0.0);
			  cn->setQs(j,0.0);
			}
		      }
		      ret=cn->EroDep(i,erolist,timegb);
		      for(size_t j=0;j<cn->getNumg();j++){
			cn->getDownstrmNbr()->addQsin(j,-ret[j]*cn->getVArea()/dtmax);
		      }
		      dz=0.;
		    }
		    else{//top layer is not deep enough, need to erode more layers
		      flag=false;
		      for(size_t j=0;j<cn->getNumg();j++){
			erolist[j]=-cn->getLayerDgrade(i,j);
			if(erolist[j]<(cn->getQsin(j)-cn->getQs(j))*dtmax/cn->getVArea()){
			  //decrease total dz because of capacity limitations
			  erolist[j]=(cn->getQsin(j)-cn->getQs(j))*dtmax/cn->getVArea();
			  cn->setQsin(j,0.0);
			  cn->setQs(j,0.0);
			  //need to set these to zero since the capacity has
			  //now been filled by the stuff in this layer
			  flag=true;
			  //Since not taking all of the material from the
			  //surface, surface layer won't be removed-must inc i
			}
			dz-=erolist[j];
		      }
		      ret=cn->EroDep(i,erolist,timegb);
		      for(size_t j=0;j<cn->getNumg();j++){
			//if * operator was overloaded for arrays, no loop necessary
			cn->getDownstrmNbr()->addQsin(j,-ret[j]*cn->getVArea()/dtmax);
		      }
		      if(flag){
			i++;
		      }
		    }
                  }
		}
		else{//trans-lim
                  //std::cout<<"X "<<cn->getX()<<" Y "<<cn->getY();
                  for(size_t j=0;j<cn->getNumg();j++){
		    erolist[j]=(cn->getQsin(j)-cn->getQs(j))*dtmax/cn->getVArea();
		    // std::cout<<" j "<<j<<" "<<erolist[j];
                  }
                  //std::cout<<std::endl;

                  int i=0;
                  depck=0.;
                  while(depck<cn->getChanDepth()){
		    depck+=cn->getLayerDepth(i);
		    int flag=cn->getNumLayer();
		    ret=cn->EroDep(i,erolist,timegb);
		    double sum=0.;
		    for(size_t j=0;j<cn->getNumg();j++){
		      cn->getDownstrmNbr()->addQsin(j,-ret[j]*cn->getVArea()/dtmax);
		      erolist[j]-=ret[j];
		      sum+=erolist[j];
		    }
		    if(sum>-0.0000001)
		      depck=cn->getChanDepth();
		    if(flag==cn->getNumLayer())
		      i++;
                  }
		}//end if( trans-limited )
	      }//ends(if dz<0)
            else if(dz>0) //total deposition -> need if cause erodep chokes with 0
	      {
		//Get texture of stuff to be deposited
		for(size_t j=0;j<cn->getNumg();j++)
		  erolist[j]=(cn->getQsin(j)-cn->getQs(j))*dtmax/cn->getVArea();
		ret=cn->EroDep(0,erolist,timegb);
		for(size_t j=0;j<cn->getNumg();j++){
                  cn->getDownstrmNbr()->addQsin(j,-ret[j]*cn->getVArea()/dtmax);
		}

	      }

	  } // Ends for( cn = ni.FirstP()...

	 // Erode vegetation
#if 0
#define NEWVEG 0
	if( pVegetation && NEWVEG ) pVegetation->ErodeVegetation( meshPtr, dtmax );
#undef NEWVEG
#endif

	// Update time remainig
	dtg -= dtmax;
	
		  if(1) //DEBUG
	      {
	         debugCount++;
		     if( debugCount > 1e6 )
		        ReportFatalError("More than 1e6 iterations in ErodeDetachLim()" );
	      }
	
	//std::cout<<"Time remaining now "<<dtg<<std::endl;
      } while( dtg>1e-6 );  //Keep going until we've used up the whole time intrvl
  }//end if rainrate-infilt>0


   //std::cout<<"ending detach erode"<<std::endl;
}// End erosion algorithm
